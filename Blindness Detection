import cv2
import numpy as np
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image

# Load the pre-trained VGG16 model
model = VGG16(weights='imagenet')

# Load and preprocess the image (replace 'test_image.jpg' with your image path)
img_path = 'test_image.jpg'
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

# Make predictions using the VGG16 model
predictions = model.predict(img_array)
decoded_predictions = decode_predictions(predictions)

# Display the top predicted classes
for i in range(len(decoded_predictions[0])):
    print(f"{decoded_predictions[0][i][1]}: {decoded_predictions[0][i][2]:.2f}")

# Determine the class label (you would need to customize this based on your dataset)
if decoded_predictions[0][0][1] == 'normal':
    result = "Normal"
else:
    result = "Abnormal (Blindness)"

print(f"Prediction: {result}")

# Display the image with the prediction
img = cv2.imread(img_path)
cv2.putText(img, f"Prediction: {result}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
cv2.imshow("Image with Prediction", img)
cv2.waitKey(0)
cv2.destroyAllWindows()
